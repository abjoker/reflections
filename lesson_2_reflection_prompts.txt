What happens when you initialize a repository? Why do you need to do it?

   When I initialize a repository, I can perform all the functions such 
   tracking down the changes, what happens is that another hidden 
   repository called '.git' is created, the period at the beginning tells
   the OS to hide the file as the user is not considered with the metadata
   present in the .git repository. The .git repository is necessary for
   the metadata necessary for the system on which the file operates.
   
   

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     The staging area is different from the working directory and the repository
	 as we can perform as many changes as we want on the staging area, without
	 affecting the contents of our working directory as well as our repository.
	 Apart from that, whwn we are finally ready with a logical change to be 
	 committed we can do so by committing our changes from the staging area to 
	 our repository
	 


How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
